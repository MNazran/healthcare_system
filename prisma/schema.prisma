// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  NURSE
  DOCTOR
  LAB_TECHNICIAN
  PATIENT
  CASHIER
}

enum Status {
  ACTIVE
  INACTIVE
  DORMANT
}

enum JobType {
  FULL
  PART
}

enum Gender {
  MALE
  FEMALE
}

enum AppointmentStatus {
  PENDING
  SCHEDULED
  CANCELLED
  COMPLETED
}

enum PaymentMethod {
  CASH
  CARD
}

enum PaymentStatus {
  PAID
  UNPAID
  PART
}

model Patient {
  id                        String  @id //clerk userId
  first_name                String
  last_name                 String
  date_of_birth             DateTime
  gender                    Gender @default(MALE)
  phone                     String
  email                     String  @unique
  marital_status            String
  address                   String
  emergencty_contact_name   String
  emergency_contact_number  String
  relation                  String
  blood_group               String?
  allergies                 String?
  medical_conditions        String?
  medical_history           String?
  insurance_provider        String?
  insurance_number          String?
  privacy_consent           Boolean
  service_consent           Boolean
  medical_consent           Boolean
  img                       String?

  appointments              Appointment[]
  medical                   MedicalRecords[]
  payments                  Payment[]

  created_at                DateTime @default(now())
  updated_at                DateTime @updatedAt
}

model Doctor {
  id                        String @id
  email                     String @unique
  name                      String 
  specialization            String
  license_number            String
  phone                     String
  address                   String
  department                String?
  img                       String?
  availability_status       String?
  type                      JobType @default(FULL)
  working_days              WorkingDays[]
  appointments              Appointment[]

  created_at                DateTime @default(now())
  updated_at                DateTime @updatedAt
}

model WorkingDays {
  id                Int @id @default(autoincrement())
  doctor_id         String
  day               String
  start_time        String
  close_time        String

  doctor            Doctor @relation(fields: [doctor_id],references: [id],onDelete: Cascade)

  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
}

model Staff {
  id              String @id
  email           String @unique
  name            String
  phone           String
  address         String
  department      String?
  img             String?
  license_number  String?

  role            Role
  status          Status @default(ACTIVE)

  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model Appointment {
  id                Int  @id @default(autoincrement())
  patient_id        String
  doctor_id         String
  appointment_date  DateTime
  time              String
  status            AppointmentStatus @default(PENDING)
  type              String
  note              String?
  patient           Patient @relation(fields: [patient_id],references: [id], onDelete: Cascade)
  doctor            Doctor  @relation(fields: [doctor_id],references: [id])

  bills             Payment[]
  medical           MedicalRecords[]

  reason            String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
}

model Payment {
  id              Int @id @default(autoincrement())
  bill_id         Int?
  patient_id      String
  appointment_id  Int @unique
  bill_date       DateTime
  payment_date    DateTime
  discount        Float
  total_amount    Float
  amount_paid     Float

  payment_method  PaymentMethod @default(CASH)
  status          PaymentStatus @default(UNPAID)
  receipt_number  Int @default(autoincrement())

  appointment     Appointment @relation(fields: [appointment_id], references: [id], onDelete: Cascade)
  patient         Patient @relation(fields: [patient_id],references: [id], onDelete: Cascade)
  bills           PatientBills[]

  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model PatientBills {
  id              Int @id @default(autoincrement())
  bill_id         Int
  service_id      Int
  service_date    DateTime
  quantity        Int
  unit_cost       Float
  total_cost      Float
  payment         Payment @relation(fields: [bill_id],references: [id],onDelete: Cascade)

  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model LabTest {
  id          Int @id @default(autoincrement())
  record_id   Int
  test_date   DateTime
}

model MedicalRecords {
  id              Int @id @default(autoincrement())
  patient_id      String
  appointment_id  Int
  doctor_id       String
  treatement_plan String?
  prescriptions   String?
  lab_request     String?

  appointment     Appointment @relation(fields: [appointment_id], references: [id],onDelete: Cascade)
  patient         Patient @relation(fields: [patient_id],references: [id],onDelete: Cascade)
  notes           String?

  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}